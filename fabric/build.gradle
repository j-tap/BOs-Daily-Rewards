plugins {
  id "com.github.johnrengelman.shadow" version "7.1.2"
  id 'com.matthewprenger.cursegradle' version '1.4.0'
  id 'nu.studer.credentials' version '3.0'
  id "com.modrinth.minotaur" version "2.+"
}

architectury {
  platformSetupLoomIde()
  fabric()
}

configurations {
  common
  shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentFabric.extendsFrom common
}

dependencies {
  modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
  modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
  modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

  common(project(path: ":common", configuration: "namedElements")) { transitive false }
  shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

  // Recommended Mods
  modImplementation "curse.maven:tooltipfix-411557:4577194"
}

processResources {
  inputs.property "version", "${rootProject.version_major}.${rootProject.version_minor}.${rootProject.version_patch}"

  filesMatching("fabric.mod.json") {
    expand "version": "${rootProject.version_major}.${rootProject.version_minor}.${rootProject.version_patch}"
  }
}

shadowJar {
  exclude "architectury.common.json"

  configurations = [project.configurations.shadowCommon]
  archiveClassifier = "dev-shadow"
}

remapJar {
  injectAccessWidener = true
  input.set shadowJar.archiveFile
  dependsOn shadowJar
}

sourcesJar {
  def commonSources = project(":common").sourcesJar
  dependsOn commonSources
  from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
  withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
    skip()
  }
}

publishing {
  publications {
    mavenFabric(MavenPublication) {
      artifactId = rootProject.mod_id + "-" + project.name
      from components.java
    }
  }

  // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
  repositories {
    // Add repositories to publish to here.
  }
}

curseforge {
  apiKey = "${credentials.forKey('curseforge_api_token')}"
  project {
    id = "${project.curseforge_project_id}"
    changelogType = 'markdown'
    releaseType = "${project.curseforge_release_type}"
    addGameVersion("${project.minecraft_version}")
    addGameVersion("Fabric")
    addGameVersion("Quilt")

    mainArtifact(remapJar) {
      relations {
        requiredDependency 'fabric-api'
        requiredDependency 'architectury-api'
        optionalDependency 'tooltipfix'
      }
    }
  }
}

modrinth {
  token = "${credentials.forKey('modrinth_api_token')}"
  projectId = "${project.modrinth_project_id}"
  versionNumber = "${project.version}"
  versionType = "${project.modrinth_release_type}"
  versionName = "${project.mod_name} ${project.version}"
  uploadFile = remapJar
  gameVersions = ["${project.minecraft_version}"]
  loaders = ["fabric", "quilt"]
  dependencies {
    required.project "fabric-api", "architectury-api"
    optional.project "tooltipfix"
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}